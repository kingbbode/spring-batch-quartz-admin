package com.kingbbode.execution.domain;

import com.kingbbode.execution.dto.StepExecutionResponse;
import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;

/**
 * BatchStepExecution generated by hbm2java
 */
@Getter
@Setter
@Entity
@Table(name="BATCH_STEP_EXECUTION")
public class BatchStepExecution  implements java.io.Serializable {

    @Id
    @Column(name="STEP_EXECUTION_ID", unique=true, nullable=false)
    private long stepExecutionId;

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="JOB_EXECUTION_ID", nullable=false, insertable=false, updatable=false)
    private BatchJobExecution batchJobExecution;

    @Version
    @Column(name="VERSION", nullable=false)
    private long version;

    @Column(name="STEP_NAME", nullable=false, length=100)
    private String stepName;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="START_TIME", nullable=false, length=19)
    private Date startTime;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="END_TIME", length=19)
    private Date endTime;

    @Column(name="STATUS", length=10)
    private String status;

    @Column(name="COMMIT_COUNT")
    private Long commitCount;

    @Column(name="READ_COUNT")
    private Long readCount;

    @Column(name="FILTER_COUNT")
    private Long filterCount;

    @Column(name="WRITE_COUNT")
    private Long writeCount;

    @Column(name="READ_SKIP_COUNT")
    private Long readSkipCount;

    @Column(name="WRITE_SKIP_COUNT")
    private Long writeSkipCount;

    @Column(name="PROCESS_SKIP_COUNT")
    private Long processSkipCount;

    @Column(name="ROLLBACK_COUNT")
    private Long rollbackCount;

    @Column(name="EXIT_CODE", length=2500)
    private String exitCode;

    @Column(name="EXIT_MESSAGE", length=2500)
    private String exitMessage;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="LAST_UPDATED", length=19)
    private Date lastUpdated;

    public StepExecutionResponse toStepExecutionDto() {
        return StepExecutionResponse.builder()
                .id(this.stepExecutionId)
                .name(this.stepName)
                .createTIme(this.startTime.getTime())
                .endTime(this.endTime.getTime())
                .status(this.status)
                .commitCount(this.commitCount)
                .readCount(this.readCount)
                .filterCount(this.filterCount)
                .writeCount(this.writeCount)
                .readSkipCount(this.readSkipCount)
                .writeSkipCount(this.writeSkipCount)
                .processSkipCount(this.processSkipCount)
                .rollbackCount(this.rollbackCount)
                .build();
    }
}


