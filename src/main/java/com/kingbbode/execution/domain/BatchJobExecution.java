package com.kingbbode.execution.domain;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * BatchJobExecution generated by hbm2java
 */
@Getter
@Setter
@Entity
@Table(name="BATCH_JOB_EXECUTION")
public class BatchJobExecution  implements java.io.Serializable {

    @Id
    @Column(name="JOB_EXECUTION_ID", unique=true, nullable=false)
    private long jobExecutionId;

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="JOB_INSTANCE_ID", nullable=false)
    private BatchJobInstance batchJobInstance;

    @Version
    @Column(name="VERSION")
    private Long version;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATE_TIME", nullable=false, length=19)
    private Date createTime;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="START_TIME", length=19)
    private Date startTime;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="END_TIME", length=19)
    private Date endTime;

    @Column(name="STATUS", length=10)
    private String status;

    @Column(name="EXIT_CODE", length=2500)
    private String exitCode;

    @Column(name="EXIT_MESSAGE", length=2500)
    private String exitMessage;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="LAST_UPDATED", length=19)
    private Date lastUpdated;

    @Column(name="JOB_CONFIGURATION_LOCATION", length=2500)
    private String jobConfigurationLocation;

    @OneToMany(fetch=FetchType.LAZY, mappedBy="batchJobExecution")
    private Set<BatchStepExecution> batchStepExecutions = new HashSet<>(0);

    @OneToMany(fetch=FetchType.LAZY, mappedBy="batchJobExecution")
    private Set<BatchJobExecutionParams> batchJobExecutionParamses = new HashSet<>(0);
}


