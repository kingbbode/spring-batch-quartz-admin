package com.kingbbode.job.domain;

import lombok.Getter;
import lombok.Setter;
import org.quartz.JobDataMap;

import javax.persistence.*;

/**
 * QrtzTriggers generated by hbm2java
 */
@Getter
@Setter
@Entity
@Table(name="QRTZ_TRIGGERS")
public class QrtzTriggers  implements java.io.Serializable {

    @EmbeddedId
    private QrtzTriggersId id;

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumns( {
            @JoinColumn(name="SCHED_NAME", referencedColumnName="SCHED_NAME", nullable=false, insertable=false, updatable=false),
            @JoinColumn(name="JOB_NAME", referencedColumnName="JOB_NAME", nullable=false, insertable=false, updatable=false),
            @JoinColumn(name="JOB_GROUP", referencedColumnName="JOB_GROUP", nullable=false, insertable=false, updatable=false) } )
    private QrtzJobDetails qrtzJobDetails;

    @Column(name="JOB_NAME", nullable=false, length=200)
    private String jobName;

    @Column(name="JOB_GROUP", nullable=false, length=200)
    private String jobGroup;

    @Column(name="DESCRIPTION", length=250)
    private String description;

    @Column(name="NEXT_FIRE_TIME")
    private Long nextFireTime;

    @Column(name="PREV_FIRE_TIME")
    private Long prevFireTime;

    @Column(name="PRIORITY")
    private Integer priority;

    @Column(name="TRIGGER_STATE", nullable=false, length=16)
    private String triggerState;

    @Column(name="TRIGGER_TYPE", nullable=false, length=8)
    private String triggerType;

    @Column(name="START_TIME", nullable=false)
    private long startTime;

    @Column(name="END_TIME")
    private Long endTime;

    @Column(name="CALENDAR_NAME", length=200)
    private String calendarName;

    @Column(name="MISFIRE_INSTR")
    private Short misfireInstr;

    @Column(name="JOB_DATA")
    private JobDataMap jobData;

    @OneToOne(fetch=FetchType.LAZY, mappedBy="qrtzTriggers")
    private QrtzSimpropTriggers qrtzSimpropTriggers;

    @OneToOne(fetch=FetchType.LAZY, mappedBy="qrtzTriggers")
    private QrtzCronTriggers qrtzCronTriggers;

    @OneToOne(fetch=FetchType.LAZY, mappedBy="qrtzTriggers")
    private QrtzBlobTriggers qrtzBlobTriggers;

    @OneToOne(fetch=FetchType.LAZY, mappedBy="qrtzTriggers", cascade = CascadeType.ALL)
    private QrtzSimpleTriggers qrtzSimpleTriggers;
}


