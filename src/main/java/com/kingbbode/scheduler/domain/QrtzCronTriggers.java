package com.kingbbode.scheduler.domain;

import com.kingbbode.scheduler.dto.SchedulerResponse;
import lombok.Getter;
import lombok.Setter;
import org.quartz.CronExpression;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.Table;

/**
 * QrtzCronTriggers generated by hbm2java
 */
@Getter
@Setter
@Entity
@Table(name="QRTZ_CRON_TRIGGERS")
public class QrtzCronTriggers  implements java.io.Serializable {

    @EmbeddedId
    private QrtzTriggersId id;

    @Column(name="CRON_EXPRESSION", nullable=false, length=200)
    private String cronExpression;

    @Column(name="TIME_ZONE_ID", length=80)
    private String timeZoneId;

    public SchedulerResponse.CronTrigger toCronTriggerResponse() {
        return SchedulerResponse.CronTrigger.builder()
                .name(id.getTriggerName())
                .cronExpression(this.cronExpression)
                .build();
    }

    public void updateCron(String cronExpression) {
        if(!CronExpression.isValidExpression(cronExpression)){
            throw new IllegalArgumentException("invalid cron expression");
        }
        this.cronExpression = cronExpression;
    }
}


