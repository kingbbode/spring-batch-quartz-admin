package com.kingbbode.scheduler.domain;

import lombok.*;
import org.quartz.JobDataMap;

import javax.persistence.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectOutput;
import java.io.ObjectOutputStream;
import java.time.LocalDateTime;
import java.time.ZoneId;

/**
 * QrtzTriggers generated by hbm2java
 */
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="QRTZ_TRIGGERS")
public class QrtzTriggers implements java.io.Serializable {
    
    @EmbeddedId
    private QrtzTriggersId id;

    @Column(name="JOB_NAME", nullable=false, length=200)
    private String jobName;

    @Column(name="JOB_GROUP", nullable=false, length=200)
    private String jobGroup;

    @Column(name="DESCRIPTION", length=250)
    private String description;

    @Column(name="NEXT_FIRE_TIME")
    private Long nextFireTime;

    @Column(name="PREV_FIRE_TIME")
    private Long prevFireTime;

    @Column(name="PRIORITY")
    private Integer priority;

    @Column(name="TRIGGER_STATE", nullable=false, length=16)
    private String triggerState;

    @Column(name="TRIGGER_TYPE", nullable=false, length=8)
    private String triggerType;

    @Column(name="START_TIME", nullable=false)
    private long startTime;

    @Column(name="END_TIME")
    private Long endTime;

    @Column(name="CALENDAR_NAME", length=200)
    private String calendarName;

    @Column(name="MISFIRE_INSTR")
    private Short misfireInstr;

    @Column(name="JOB_DATA")
    private byte[]  jobData;

    @Transient
    public boolean isCronType() {
        return "CRON".equals(this.triggerType);
    }

    @OneToOne(fetch=FetchType.LAZY)
    @PrimaryKeyJoinColumn
    private QrtzSimpropTriggers qrtzSimpropTriggers;

    @OneToOne(fetch=FetchType.LAZY)
    @PrimaryKeyJoinColumn
    private QrtzCronTriggers qrtzCronTriggers;

    @OneToOne(fetch=FetchType.LAZY)
    @PrimaryKeyJoinColumn
    private QrtzBlobTriggers qrtzBlobTriggers;

    @OneToOne(fetch=FetchType.LAZY, cascade = CascadeType.ALL)
    @PrimaryKeyJoinColumn
    private QrtzSimpleTriggers qrtzSimpleTriggers;

    public static class SimpleTriggerBuilder {
        private QrtzTriggersId qrtzTriggersId;
        private String jobName;
        private String jobGroup;
        private long startTime;
        private int repeatCount;
        private int repeatInterval;
        private JobDataMap jobDataMap;

        public SimpleTriggerBuilder id(QrtzTriggersId id) {
            this.qrtzTriggersId = id;
            return this;
        }

        public SimpleTriggerBuilder jobName(String jobName) {
            this.jobName = jobName;
            return this;
        }

        public SimpleTriggerBuilder jobGroup(String jobGroup) {
            this.jobGroup = jobGroup;
            return this;
        }

        public SimpleTriggerBuilder repeatCount(int repeatCount) {
            this.repeatCount = repeatCount;
            return this;
        }

        public SimpleTriggerBuilder repeatInterval(int repeatInterval) {
            this.repeatInterval = repeatInterval;
            return this;
        }

        public SimpleTriggerBuilder startTime(LocalDateTime time) {
            this.startTime = time.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
            return this;
        }

        public SimpleTriggerBuilder param(JobDataMap jobDataMap) {
            this.jobDataMap = jobDataMap;
            return this;
        }

        public QrtzTriggers build() {
            QrtzTriggers qrtzTriggers =  QrtzTriggers.builder()
                    .id(this.qrtzTriggersId)
                    .jobName(this.jobName)
                    .jobGroup(this.jobGroup)
                    .startTime(this.startTime)
                    .nextFireTime(this.startTime)
                    .triggerState("WAITING")
                    .triggerType("SIMPLE")
                    .jobData(toByte(jobDataMap))
                    .misfireInstr((short) 0)
                    .build();
            qrtzTriggers.setQrtzSimpleTriggers(
                    QrtzSimpleTriggers.builder()
                    .id(this.qrtzTriggersId)
                    .repeatCount(this.repeatCount)
                    .repeatInterval(this.repeatInterval)
                    .build()
            );
            return qrtzTriggers;
        }

        private byte[] toByte(JobDataMap jobDataMap) {
            try(ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutput out = new ObjectOutputStream(bos)) {
                out.writeObject(jobDataMap);
                return bos.toByteArray();
            } catch (IOException e) {
                e.printStackTrace();
            }
            return new byte[0];
        }
    }
}


