package com.kingbbode.scheduler.domain;

import lombok.*;
import org.quartz.JobDataMap;
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.JobParametersBuilder;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Collections;
import java.util.Map;

/**
 * QrtzTriggers generated by hbm2java
 */
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="QRTZ_TRIGGERS")
public class QrtzTriggers implements java.io.Serializable {

    @EmbeddedId
    private QrtzTriggersId id;

    @Column(name="JOB_NAME", nullable=false, length=200)
    private String jobName;

    @Column(name="JOB_GROUP", nullable=false, length=200)
    private String jobGroup;

    @Column(name="DESCRIPTION", length=250)
    private String description;

    @Column(name="NEXT_FIRE_TIME")
    private Long nextFireTime;

    @Column(name="PREV_FIRE_TIME")
    private Long prevFireTime;

    @Column(name="PRIORITY")
    private Integer priority;

    @Column(name="TRIGGER_STATE", nullable=false, length=16)
    private String triggerState;

    @Column(name="TRIGGER_TYPE", nullable=false, length=8)
    private String triggerType;

    @Column(name="START_TIME", nullable=false)
    private long startTime;

    @Column(name="END_TIME")
    private Long endTime;

    @Column(name="CALENDAR_NAME", length=200)
    private String calendarName;

    @Column(name="MISFIRE_INSTR")
    private Short misfireInstr;

    @Column(name="JOB_DATA")
    private JobDataMap jobData;

    public boolean isCronType() {
        return "CRON".equals(this.triggerType);
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumns( {
            @JoinColumn(name="SCHED_NAME", referencedColumnName="SCHED_NAME", nullable=false, insertable=false, updatable=false),
            @JoinColumn(name="JOB_NAME", referencedColumnName="JOB_NAME", nullable=false, insertable=false, updatable=false),
            @JoinColumn(name="JOB_GROUP", referencedColumnName="JOB_GROUP", nullable=false, insertable=false, updatable=false) } )
    private QrtzJobDetails qrtzJobDetails;

    @OneToOne(fetch=FetchType.LAZY, mappedBy="qrtzTriggers")
    private QrtzSimpropTriggers qrtzSimpropTriggers;

    @OneToOne(fetch=FetchType.LAZY, mappedBy="qrtzTriggers")
    private QrtzCronTriggers qrtzCronTriggers;

    @OneToOne(fetch=FetchType.LAZY, mappedBy="qrtzTriggers")
    private QrtzBlobTriggers qrtzBlobTriggers;

    @OneToOne(fetch=FetchType.LAZY, mappedBy="qrtzTriggers", cascade = CascadeType.ALL)
    private QrtzSimpleTriggers qrtzSimpleTriggers;

    public static class SimpleTriggerBuilder {
        private QrtzTriggersId qrtzTriggersId;
        private String jobName;
        private String jobGroup;
        private long startTime;
        private int repeatCount;
        private int repeatInterval;
        private JobParameters jobParameters;

        public SimpleTriggerBuilder id(QrtzTriggersId id) {
            this.qrtzTriggersId = id;
            return this;
        }

        public SimpleTriggerBuilder jobName(String jobName) {
            this.jobName = jobName;
            return this;
        }

        public SimpleTriggerBuilder jobGroup(String jobGroup) {
            this.jobGroup = jobGroup;
            return this;
        }

        public SimpleTriggerBuilder repeatCount(int repeatCount) {
            this.repeatCount = repeatCount;
            return this;
        }

        public SimpleTriggerBuilder repeatInterval(int repeatInterval) {
            this.repeatInterval = repeatInterval;
            return this;
        }

        public SimpleTriggerBuilder startTime(LocalDateTime time) {
            this.startTime = time.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();
            return this;
        }

        public SimpleTriggerBuilder param(Map<String, String> param) {
            JobParametersBuilder builder = new JobParametersBuilder();
            param.forEach(builder::addString);
            this.jobParameters = builder.toJobParameters();
            return this;
        }

        public QrtzTriggers build() {
            QrtzTriggers qrtzTriggers =  QrtzTriggers.builder()
                    .id(this.qrtzTriggersId)
                    .jobName(this.jobName)
                    .jobGroup(this.jobGroup)
                    .startTime(this.startTime)
                    .triggerState("WAITING")
                    .triggerType("SIMPLE")
                    .jobData(new JobDataMap(Collections.singletonMap("forceJobParameters", this.jobParameters)))
                    .build();
            qrtzTriggers.setQrtzSimpleTriggers(
                    QrtzSimpleTriggers.builder()
                    .qrtzTriggers(qrtzTriggers)
                    .repeatCount(this.repeatCount)
                    .repeatInterval(this.repeatInterval)
                    .build()
            );
            return qrtzTriggers;
        }
    }
}


